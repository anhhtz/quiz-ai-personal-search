import chalk from "chalk";
import { createLogger, format, transports } from 'winston';

const logColorizedFormatter = format.printf((info) => {
	const { timestamp, level, stack, message } = info;
	let logMessage = stack || message;

	let outputLog = `${timestamp} [${level}]: ${logMessage}`;

	switch (level.toUpperCase()) {
		case "DEBUG":
			outputLog = chalk.gray(outputLog);
			break;

		case "INFO":
			outputLog = chalk.blueBright(outputLog);
			break;

		case "WARN":
			outputLog = chalk.yellowBright(outputLog);
			break;

		case "SUCCESS":
			outputLog = chalk.greenBright(outputLog);
			break;

		case "ERROR":
			outputLog = chalk.redBright(outputLog);
			break;

		default:
			break;
	}
	return outputLog;
});

const logFormatter = format.printf((info) => {
	const { timestamp, level, stack, message } = info;
	let logMessage = stack || message;

	let outputLog = `{"timestamp": "${timestamp}", "level": "${level}", "message": "${logMessage}"}`;

	return outputLog;
});
const logger = createLogger({
	level: 'info',
	format: format.combine(
		format.timestamp({
			format: 'YYYY-MM-DD HH:mm:ss'
		}),
		format.errors({ stack: true }),
		format.splat(),
		format.json(),
		format.colorize(),
	),
	transports: [
		new transports.Console({
			level: "verbose",
			format: logColorizedFormatter,
		}),
		//
		// - Write all logs with importance level of `error` or less to `error.log`
		// - Write all logs with importance level of `info` or less to `combined.log`
		//
		new transports.File({ filename: './logs/error.log', level: 'error', format: logFormatter, }),
		new transports.File({
			filename: './logs/combined.log',
			format: logFormatter,
		}),
	],
});

//
// If we're not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
// if (process.env.NODE_ENV !== 'production') {
//     logger.add(new transports.Console({
//         format: logFormatter,
//         // format: format.combine(format.colorize(), format.simple()),
//     }));
// }

export { logger };
